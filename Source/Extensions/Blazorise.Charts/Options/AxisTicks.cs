#region Using directives
using System;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
#endregion

namespace Blazorise.Charts
{
    /// <summary>
    /// The tick configuration is nested under the scale configuration in the ticks key. It defines options for the tick marks that are generated by the axis.
    /// </summary>
    [DataContract]
    public class AxisTicks
    {
        /// <summary>
        /// If true, show tick marks.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public bool? Display { get; set; } = true;

        /// <summary>
        /// Font color for tick labels.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public string FontColor { get; set; } = "#666";

        /// <summary>
        /// Font family for the tick labels, follows CSS font-family options.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public string FontFamily { get; set; } = "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif";

        /// <summary>
        /// Font size for the tick labels.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public int? FontSize { get; set; } = 12;

        /// <summary>
        /// Font style for the tick labels, follows CSS font-style options (i.e. normal, italic, oblique, initial, inherit).
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public string FontStyle { get; set; } = "normal";

        /// <summary>
        /// Height of an individual line of text.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public decimal? LineHeight { get; set; } = 1.2m;

        /// <summary>
        /// Reverses order of tick labels.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public bool? Reverse { get; set; } = false;

        /// <summary>
        /// Minor ticks configuration. Omitted options are inherited from options above.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public AxisMinorTick Minor { get; set; }

        /// <summary>
        /// Major ticks configuration. Omitted options are inherited from options above.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public AxisMajorTick Major { get; set; }

        /// <summary>
        /// Sets the offset of the tick labels from the axis.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public int? Padding { get; set; }

        /// <summary>
        /// if true, scale will include 0 if it is not already included.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        public bool? BeginAtZero { get; set; } = false;

        /// <summary>
        /// Defines the Expression which will be converted to JavaScript as a string representation of the tick value as it should be displayed on the chart.
        /// </summary>
        [DataMember( EmitDefaultValue = false )]
        [JsonIgnore( Condition = JsonIgnoreCondition.WhenWritingNull )]
        [JsonConverter( typeof( LambdaConverter<Func<double, int, double[], string>> ) )]
        public Expression<Func<double, int, double[], string>> Callback { get; set; }
    }
}
